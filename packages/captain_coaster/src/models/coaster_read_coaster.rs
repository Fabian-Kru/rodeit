/*
 * Captain Coaster API
 *
 * Welcome to Captain Coaster API! API Keys for authentication can be found in your profile page. Contact us to get support.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CoasterReadCoaster : Coaster



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoasterReadCoaster {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "materialType", skip_serializing_if = "Option::is_none")]
    pub material_type: Option<Box<crate::models::MaterialTypeReadCoaster>>,
    #[serde(rename = "seatingType", skip_serializing_if = "Option::is_none")]
    pub seating_type: Option<Box<crate::models::SeatingTypeReadCoaster>>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<Box<crate::models::ModelReadCoaster>>,
    #[serde(rename = "speed", skip_serializing_if = "Option::is_none")]
    pub speed: Option<i32>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    #[serde(rename = "length", skip_serializing_if = "Option::is_none")]
    pub length: Option<i32>,
    #[serde(rename = "inversionsNumber", skip_serializing_if = "Option::is_none")]
    pub inversions_number: Option<i32>,
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Box<crate::models::ManufacturerReadCoaster>>,
    #[serde(rename = "restraint", skip_serializing_if = "Option::is_none")]
    pub restraint: Option<Box<crate::models::RestraintReadCoaster>>,
    #[serde(rename = "launchs", skip_serializing_if = "Option::is_none")]
    pub launchs: Option<Vec<crate::models::LaunchReadCoaster>>,
    #[serde(rename = "park", skip_serializing_if = "Option::is_none")]
    pub park: Option<Box<crate::models::ParkReadCoaster>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::StatusReadCoaster>>,
    #[serde(rename = "openingDate", skip_serializing_if = "Option::is_none")]
    pub opening_date: Option<String>,
    #[serde(rename = "closingDate", skip_serializing_if = "Option::is_none")]
    pub closing_date: Option<String>,
    #[serde(rename = "totalRatings", skip_serializing_if = "Option::is_none")]
    pub total_ratings: Option<i32>,
    #[serde(rename = "validDuels", skip_serializing_if = "Option::is_none")]
    pub valid_duels: Option<i32>,
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<String>,
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "mainImage", skip_serializing_if = "Option::is_none")]
    pub main_image: Option<Box<crate::models::ImageReadCoaster>>,
}

impl CoasterReadCoaster {
    /// Coaster
    pub fn new(name: String) -> CoasterReadCoaster {
        CoasterReadCoaster {
            id: None,
            name,
            material_type: None,
            seating_type: None,
            model: None,
            speed: None,
            height: None,
            length: None,
            inversions_number: None,
            manufacturer: None,
            restraint: None,
            launchs: None,
            park: None,
            status: None,
            opening_date: None,
            closing_date: None,
            total_ratings: None,
            valid_duels: None,
            score: None,
            rank: None,
            main_image: None,
        }
    }
}


