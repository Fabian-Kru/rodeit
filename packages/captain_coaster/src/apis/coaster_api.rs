/*
 * Captain Coaster API
 *
 * Welcome to Captain Coaster API! API Keys for authentication can be found in your profile page. Contact us to get support.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`get_coaster_collection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCoasterCollectionError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_coaster_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCoasterItemError {
	Status404(),
	UnknownValue(serde_json::Value),
}

pub async fn get_coaster_collection(
	configuration: &configuration::Configuration,
	id: Option<i32>,
	id_left_square_bracket_right_square_bracket: Option<Vec<i32>>,
	name: Option<&str>,
	manufacturer: Option<&str>,
	manufacturer_left_square_bracket_right_square_bracket: Option<Vec<String>>,
	order_left_square_bracket_id_right_square_bracket: Option<&str>,
	order_left_square_bracket_rank_right_square_bracket: Option<&str>,
	rank_left_square_bracket_between_right_square_bracket: Option<&str>,
	rank_left_square_bracket_gt_right_square_bracket: Option<&str>,
	rank_left_square_bracket_gte_right_square_bracket: Option<&str>,
	rank_left_square_bracket_lt_right_square_bracket: Option<&str>,
	rank_left_square_bracket_lte_right_square_bracket: Option<&str>,
	total_ratings_left_square_bracket_between_right_square_bracket: Option<&str>,
	total_ratings_left_square_bracket_gt_right_square_bracket: Option<&str>,
	total_ratings_left_square_bracket_gte_right_square_bracket: Option<&str>,
	total_ratings_left_square_bracket_lt_right_square_bracket: Option<&str>,
	total_ratings_left_square_bracket_lte_right_square_bracket: Option<&str>,
	exists_left_square_bracket_main_image_right_square_bracket: Option<bool>,
	page: Option<i32>,
) -> Result<Vec<crate::models::CoasterListCoaster>, Error<GetCoasterCollectionError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/api/coasters", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = id {
		local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = id_left_square_bracket_right_square_bracket {
		local_var_req_builder = match "multi" {
			"multi" => local_var_req_builder.query(
				&local_var_str
					.into_iter()
					.map(|p| ("id[]".to_owned(), p.to_string()))
					.collect::<Vec<(std::string::String, std::string::String)>>(),
			),
			_ => local_var_req_builder.query(&[(
				"id[]",
				&local_var_str
					.into_iter()
					.map(|p| p.to_string())
					.collect::<Vec<String>>()
					.join(",")
					.to_string(),
			)]),
		};
	}
	if let Some(ref local_var_str) = name {
		local_var_req_builder =
			local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = manufacturer {
		local_var_req_builder =
			local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = manufacturer_left_square_bracket_right_square_bracket {
		local_var_req_builder = match "multi" {
			"multi" => local_var_req_builder.query(
				&local_var_str
					.into_iter()
					.map(|p| ("manufacturer[]".to_owned(), p.to_string()))
					.collect::<Vec<(std::string::String, std::string::String)>>(),
			),
			_ => local_var_req_builder.query(&[(
				"manufacturer[]",
				&local_var_str
					.into_iter()
					.map(|p| p.to_string())
					.collect::<Vec<String>>()
					.join(",")
					.to_string(),
			)]),
		};
	}
	if let Some(ref local_var_str) = order_left_square_bracket_id_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("order[id]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = order_left_square_bracket_rank_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("order[rank]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = rank_left_square_bracket_between_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("rank[between]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = rank_left_square_bracket_gt_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("rank[gt]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = rank_left_square_bracket_gte_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("rank[gte]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = rank_left_square_bracket_lt_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("rank[lt]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = rank_left_square_bracket_lte_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("rank[lte]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = total_ratings_left_square_bracket_between_right_square_bracket
	{
		local_var_req_builder =
			local_var_req_builder.query(&[("totalRatings[between]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = total_ratings_left_square_bracket_gt_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("totalRatings[gt]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = total_ratings_left_square_bracket_gte_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("totalRatings[gte]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = total_ratings_left_square_bracket_lt_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("totalRatings[lt]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = total_ratings_left_square_bracket_lte_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("totalRatings[lte]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = exists_left_square_bracket_main_image_right_square_bracket {
		local_var_req_builder =
			local_var_req_builder.query(&[("exists[mainImage]", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = page {
		local_var_req_builder =
			local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_apikey) = local_var_configuration.api_key {
		let local_var_key = local_var_apikey.key.clone();
		let local_var_value = match local_var_apikey.prefix {
			Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
			None => local_var_key,
		};
		local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
	};

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<GetCoasterCollectionError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn get_coaster_item(
	configuration: &configuration::Configuration,
	id: &str,
) -> Result<crate::models::CoasterReadCoaster, Error<GetCoasterItemError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/api/coasters/{id}",
		local_var_configuration.base_path,
		id = crate::apis::urlencode(id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_apikey) = local_var_configuration.api_key {
		let local_var_key = local_var_apikey.key.clone();
		let local_var_value = match local_var_apikey.prefix {
			Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
			None => local_var_key,
		};
		local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
	};

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<GetCoasterItemError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}
