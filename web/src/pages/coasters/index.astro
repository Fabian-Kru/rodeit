---
import { assignInlineVars } from '@vanilla-extract/dynamic';
import { union, literal, safeParse, Output } from 'valibot';

import { rodeit, captainCoaster, picturesBaseUrl } from 'src/api/mod.ts';
import BaseLayout from 'src/components/layouts/base/index.astro';
import { getCountryFlagUrl, CountryName } from 'src/country_flags.ts';
import { getUser } from 'src/session.ts';
import { body_large, label_large, title_medium } from 'src/styles/atomic/fonts.css.ts';

import {
	aside,
	aside_form,
	aside_link,
	coaster as coaster_style,
	coaster_actions,
	coaster_details,
	coaster_details_image,
	coaster_details_meta,
	coaster_details_park,
	coasters as coasters_style,
	main,
	page as page_style,
} from './index.css.ts';
import { btn, input_text } from 'src/styles/forms.css';

const FIELD_SEARCH = 'search';

const OrderBySchema = union([literal('ridden'), literal('wanted')]);
type OrderBy = Output<typeof OrderBySchema>;

const orderByResult = safeParse(OrderBySchema, Astro.url.searchParams.get('orderBy'));

if (!orderByResult.success) {
	Astro.url.searchParams.set('orderBy', 'ridden');
	return Astro.redirect(Astro.url);
}

const search = Astro.url.searchParams.get(FIELD_SEARCH);
const orderBy = orderByResult.output;

type Coaster = {
	count?: number;
	name?: string;
	image?: string;
	park?: {
		name?: string;
		country?: string;
	};
};

let coasters: Coaster[] = [];

if (search) {
	const { data } = await captainCoaster.GET('/api/coasters', {
		params: {
			query: {
				name: search,
			},
		},
	});
	if (!data) {
		return new Response(null, {
			status: 500,
			statusText: 'failed to load coasters',
		});
	}
	coasters = await Promise.all(
		data['hydra:member'].map(async (coaster) => {
			const { data } = await captainCoaster.GET('/api/coasters/{id}', {
				params: {
					path: {
						id: String(coaster.id),
					},
				},
			});
			const image = data?.mainImage?.path;

			const _coaster: Coaster = {
				name: coaster.name,
				park: coaster.park,
				image,
			};
			return _coaster;
		})
	);
} else {
	switch (orderBy) {
		case 'ridden': {
			const { data } = await rodeit.GET('/records/records/aggregate');
			if (!data) {
				return new Response(null, {
					status: 500,
					statusText: 'failed to load coasters',
				});
			}
			coasters = await Promise.all(
				data.map(async (coasterIdAndCount) => {
					const { data } = await captainCoaster.GET('/api/coasters/{id}', {
						params: {
							path: {
								id: String(coasterIdAndCount.rollercoaster_id),
							},
						},
					});
					const coaster: Coaster = {
						count: coasterIdAndCount.count,
						name: data?.name,
						image: data?.mainImage?.path,
						park: data?.park && {
							name: data.park.name,
							country: data.park.country?.name,
						},
					};
					return coaster;
				})
			);
			break;
		}
		case 'wanted': {
			const { data } = await rodeit.GET('/bucket_list/');
			if (!data) {
				return new Response(null, {
					status: 500,
					statusText: 'failed to load coasters',
				});
			}
			coasters = await Promise.all(
				data.map(async (coasterIdAndCount) => {
					const { data } = await captainCoaster.GET('/api/coasters/{id}', {
						params: {
							path: {
								id: String(coasterIdAndCount.coaster_id),
							},
						},
					});
					const coaster: Coaster = {
						count: coasterIdAndCount.count,
						name: data?.name,
						image: data?.mainImage?.path,
						park: data?.park && {
							name: data.park.name,
							country: data.park.country?.name,
						},
					};
					return coaster;
				})
			);
			break;
		}
	}
}

const user = getUser(Astro);

function localizeCount(count: number) {
	switch (orderBy) {
		case 'ridden':
			return `Ridden ${count} time${count != 1 ? 's' : ''}`;
		case 'wanted':
			return `Wanted by ${count} user${count != 1 ? 's' : ''}`;
	}
}
---

<BaseLayout>
	<div class={page_style}>
		<aside class={aside}>
			<form
				class={aside_form}
				action="/coasters"
				method="get"
			>
				<input
					class={input_text}
					type="search"
					placeholder="Search Coasters"
					name={FIELD_SEARCH}
					value={search}
					required
				/>
				<button
					type="submit"
					class={btn}
				>
					Search
				</button>
			</form>
			<ul>
				<li>
					<a
						class={aside_link}
						href="?orderBy=ridden"
						aria-current={orderBy === 'ridden' && 'page'}
					>
						<p class={label_large}>Most Ridden</p>
					</a>
				</li>
				<li>
					<a
						class={aside_link}
						href="?orderBy=wanted"
						aria-current={orderBy === 'wanted' && 'page'}
					>
						<p class={label_large}>Most Wanted</p>
					</a>
				</li>
			</ul>
		</aside>
		<main class={main}>
			<ol class={coasters_style}>
				{
					coasters.map((coaster) => {
						return (
							<li class={coaster_style}>
								<div
									class={coaster_details}
									style={assignInlineVars({
										[coaster_details_image]: `url(${picturesBaseUrl}${coaster.image})`,
									})}
								>
									{coaster.count ? (
										<p class={`${coaster_details_meta} ${body_large}`}>
											{localizeCount(coaster.count)}
										</p>
									) : (
										<div />
									)}
									<div class={coaster_details_park}>
										{coaster.park?.country && (
											<img
												height={12}
												width={18}
												alt={`${coaster.park.country} flag`}
												src={getCountryFlagUrl(coaster.park.country.slice(8) as CountryName)}
											/>
										)}
										<p class={body_large}>{coaster.park?.name}</p>
									</div>
									<p class={title_medium}>{coaster.name}</p>
								</div>
								{user && (
									<ul class={coaster_actions}>
										<li />
										<li />
									</ul>
								)}
							</li>
						);
					})
				}
			</ol>
		</main>
	</div></BaseLayout
>
