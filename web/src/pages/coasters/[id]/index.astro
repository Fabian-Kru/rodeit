---
import { assignInlineVars } from '@vanilla-extract/dynamic';

import { captainCoaster, picturesBaseUrl } from 'src/api/mod.ts';
import RootLayout from 'src/components/layouts/root.astro';
import { display_medium, title_medium } from 'src/styles/atomic/fonts.css.ts';
import { getCountryFlagUrl, CountryName } from 'src/country_flags';
import { btn } from 'src/styles/forms.css.ts';
import { getUser } from 'src/session.ts';

import { page, header, header_image, park, main, actions } from './index.css.ts';

const coasterId = Number(Astro.params.id);

if (isNaN(coasterId)) {
	return new Response(null, {
		status: 400,
		statusText: 'coaster id must be a number',
	});
}

const user = getUser(Astro.cookies);

const { data: coaster } = await captainCoaster.GET('/api/coasters/{id}', {
	params: {
		path: {
			id: String(Math.trunc(coasterId)),
		},
	},
});
---

<RootLayout>
	<div class={page}>
		<header
			class={header}
			style={assignInlineVars({
				[header_image]: `url(${picturesBaseUrl}${coaster?.mainImage?.path})`,
			})}
		>
			<div class={park}>
				<img
					height={16}
					width={24}
					alt={`${coaster?.park?.country?.name?.slice(8)} flag`}
					src={getCountryFlagUrl(coaster?.park?.country?.name?.slice(8) as CountryName)}
				/>
				<p class={title_medium}>{coaster?.park?.name}</p>
			</div>
			<h1 class={display_medium}>{coaster?.name}</h1>
		</header>
		<main class={main}>
			{
				user && (
					<form
						class={actions}
						method="post"
					>
						<input
							type="hidden"
							name="coaster_id"
							value={coaster?.id}
						/>
						<button
							type="submit"
							formaction="/profile/records/add"
							class={btn}
						>
							Create Record
						</button>
						<button
							type="submit"
							formaction="/profile/bucket_list/add"
							class={btn}
						>
							Add to Bucket List
						</button>
					</form>
				)
			}
		</main>
	</div>
</RootLayout>
