---
import { rodeit, captainCoaster } from 'src/api/mod.ts';
import ProfileLayout from 'src/components/layouts/profile/index.astro';
import { Record } from 'src/model.ts';
import { getUser, headers } from 'src/session.ts';
import { body_large, display_medium } from 'src/styles/atomic/fonts.css.ts';

const user = getUser(Astro.cookies);

if (!user) {
	return Astro.redirect('/login');
}

const userId = Number(user.sub);
const { data } = await rodeit.GET('/records/user/{user_id}', {
	params: {
		path: {
			user_id: userId,
		},
	},
	headers: headers(Astro.cookies),
});

const records: Record[] | undefined =
	data &&
	(await Promise.all(
		data.map(async (record) => {
			const { data: coaster } = await captainCoaster.GET('/api/coasters/{id}', {
				params: {
					path: {
						id: record.rollercoaster_id,
					},
				},
			});

			const _record: Record = {
				date: new Date(record.timestamp),
				coaster: coaster && {
					id: coaster.id as number,
					name: coaster.name,
					park: coaster.park && {
						name: coaster.park.name,
						country: coaster.park.country?.name,
					},
					image: coaster.mainImage?.path,
				},
			};
			return _record;
		})
	));
---

<ProfileLayout>
	<h1 class={display_medium}>My Records</h1>
	{
		records ? (
			<ol>
				{records.map((record) => (
					<li>
						<p />
					</li>
				))}
			</ol>
		) : (
			<p class={body_large}>No records found.</p>
		)
	}
</ProfileLayout>
