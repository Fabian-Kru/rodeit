---

openapi: 3.0.0
info:
  title: "Record API"
  version: "1.0.1"

servers:
  - url: "/"

components:
  schemas:
    Record:
      type: "object"
      required:
        - user_id
        - rollercoaster_id
      properties:
        user_id:
          type: "integer"
        rollercoaster_id:
          type: "integer"
  parameters:
    record_id:
      name: "record_id"
      in: path
      required: True
      schema:
        type: "integer"
    user_id:
      name: "user_id"
      in: path
      required: True
      schema:
        type: "integer"
    rollercoaster_id:
      name: "rollercoaster_id"
      in: path
      required: True
      schema:
        type: "integer"
    query_limit:
      name: "limit"
      in: query
      schema:
        type: integer
      description: "The numbers of items to return"
    query_sort:
      name: "sort"
      in: query
      schema:
        type: string
      description: "sort results by key"
    query_start:
      name: "start"
      in: query
      schema:
        type: string
        format: date-time
      description: ""
    query_end:
      name: "end"
      in: query
      schema:
        type: string
        format: date-time
      description: ""
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api.decode_token
paths:
  "/":
    get:
      summary: TODO
      description: TODO
      operationId: "record.main"
      responses:
        "200":
          description: ""
  /record:
    post:
      summary: Submit a Record
      description: Submit a new coaster to a user
      operationId: "record.submit"
      requestBody:
          description: ""
          required: True
          content:
            application/json:
              schema:
                x-body-name: "record"
                $ref: "#/components/schemas/Record"
      responses:
        "201":
          description: ""
        '401':
          description: "Access token is missing or invalid"
      security:
        - jwt: []
  /record/{record_id}:
    get:
      summary: Get a Record by ID
      operationId: "record.get_by_id"
      parameters:
        - $ref: "#/components/parameters/record_id"
      responses:
        "200":
          description: ""
        '401':
          description: "Access token is missing or invalid"
        "404":
          description: "Not found"
      security:
        - jwt: []
  /user/{user_id}:
    get:
      summary: Get Records by User
      description: Get all records of a user
      operationId: "record.get_by_user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: ""
        '401':
          description: "Access token is missing or invalid"
        "404":
          description: "Not found"
      security:
        - jwt: []
  /rollercoaster/{rollercoaster_id}:
    get:
      summary: Get Records by Coaster
      description: Get records of all users on a coaster
      operationId: "record.get_by_rollercoaster"
      parameters:
        - $ref: "#/components/parameters/rollercoaster_id"
      responses:
        "200":
          description: ""
        '401':
          description: "Access token is missing or invalid"
        "404":
          description: "Not found"
      security:
        - jwt: []
  /records:
    get:
      summary: Get all Records
      description: Get all records with pagination and sorting
      operationId: "records.get"
      parameters:
        - $ref: "#/components/parameters/query_limit"
        - $ref: "#/components/parameters/query_sort"
        - $ref: "#/components/parameters/query_start"
        - $ref: "#/components/parameters/query_end"
      responses:
        "200":
          description: ""
        '401':
          description: "Access token is missing or invalid"
      #security:
      #  - jwt: []
